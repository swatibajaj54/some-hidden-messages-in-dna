from ori_finder import get_skew_diag_data, get_hamming_mismatch, get_pattern_match, minimum_skew_value, get_approximate_pattern_match, frequent_words_with_mismatches, get_approximate_pattern_count
from neighbors import neighbors
from motif_finder import motif_matrix, score_matrix, gibbs_sampler, greedy_motif_search, greedy_motif_search_with_pseudocounts, median_string, motif_enumeration1, profile_most_probable_k_mer, entropy_matrix, distance_between_pattern_and_string, best_score_from_random_motif
from ori_finder import frequent_words_with_mismatches_and_rc
if __name__ == '__main__':
 dna = [
  "GGACAAGGGACTACAGCGCCAGCGGTCGGCCGTGTCGGACACGGACTAAGAACTGCGAAGCAACCTATGACATAGCGGGAAAGGGCGCGTGGCTCACGCTGATCGTAGCGGTGTTGAGAATATGACGGTCCCTGGCCTATGTTCGACGAGGGTGCTACCAAGACCCTTCGCTCCGCGCTCTGCTTGGTAGCGCCGCGATGAGAAGCTTTCACAGACAGCCTAGGCTTATGAAAAGCGGCAGTTCTCGTGTGTGCTCGTGCAACAGTGTTAGGTCATTGCACGGCCGACTATGCGTGGGAGTCGGACAAGGGACTACA",
  "GCGCCAGCGGTCGGCCGTGTCGGACACGGACTAAGAACTGCGAAGCAACCTATGACATAGCGGGAAAGGGCGCGTGGCTCACGCTGATCGTAGCGGTGTTGAGAATATGACGGTCCCTGGCCTATGTTCGACTCATTCGATAATTCCGAGGGTGCTACCAAGACCCTTCGCTCCGCGCTCTGCTTGGTAGCGCCGCGATGAGAAGCTTTCACAGACAGCCTAGGCTTATGAAAAGCGGCAGTTCTCGTGTGTGCTCGTGCAACAGTGTTAGGTCATTGCACGGCCGACTATGCGTGGGAGTCGGACAAGGGACTACA",
  "GGATTAATCGCCCTTATCCCAGTGATTACCGGTTCTACTCCCGTACGTGTCGGTTAGGCTCGTGCAGAAAGCCTTCCTAAATCGGTAATTGAGTCCCGAACTCAGTCCCAAGCTTCTAGTCGTGTGAAGCTTAGAGCATAGTTCCTTCCCTCGACATGTCGAATCTGGTTTCCGGGGCCACTTCTTTAAATATGGTCTTGTTGTCCGGTCGCAATTTGTTTAAACCCTCTTTCGACCAGTTTTGCACTTCAAGAACAAATTCCGGGACCTGCGGCTCCGCGAGGTCAGGCCGACGTCCCACCCGCAGACGTGGCTAT",
  "CCCGTTCAAGCTGTAATTCCACCCATCGTGTACCCGCTAGTAACCATCCAAAGGAGAAGGTGACGTGGCCCCCCTAGAGCTGAGTTAGGCCTCGTTGAATAGGGCCAGGAAGTATCCGTACGAGCCTAGCGACAAGGCATGACTAAATGGAGCAGGTCGCTCTAGAACTTGCACGAATTTCTTCACCCAAATGGGTTTGGGTTTAAACCTCACATCCCGCCGATAGCGTATTTCCTATATGCATCACGCCCACGCGTCCCTTTCCGCTGGTGTAACCCCCCCAATTTCATTACGCCGACCCTGTTACCGGTCAAACG",
  "AGGCCATGTGTCGGATACTGAAAGAGACTGTGGCGAGGGTCAGATCCACATTACCCCACCGGCTCTCACCGTTTAATTTCGAGATAATTCCGGGACGATTCCCCGAGTAGCACGCTCGGCCTTCGAATCATTTACTAACCTCTGTTACGTCATTCTCACAGGGAAAGACATGGCTACCTTCTTAGAAGGCAAGGGGGAATCGACCTACATACGCACGGGCCTACGAAAGTGCAGAAATAGGCTTTCGTTAGCCGGACCATTATTTGACGGGGACTAGACTCTTATAGCGCATACGGACCCGTGGTGCTTAGCAGTGA",
  "TATCGAGCGAAGTATACCGTCTAAGGATCCTATCAGTGACGGAACAGTAGTAGCGCAAGCATTGCAGGCAGAGCGACGAACCCCTCGCTAAGGACACATTAGATCGCCTAATTTATCGCCTCACCATCTCGTCCCCCCCGGGCGGATCAGCGGTATTGGCCGTATTTTAAGATGCGCACAGCCCAGAGACTAATATGCGGAGTGGACTAATCTCTGTTTGTTGTCGGTGGTGGTTCTCTGATTTATGTGGAAGTGAGACATTACTACACTGTAAGATCGCGTAATCAAGAATGAATTCCCCATAACTCACGTGGGTG",
  "GCCTTAATCAAATAATACAATCCAAGTCCGACTCGAGGGACAAGTGGGGACGGCAGTTCGCGATCGAGCGTAGAAACAGATAGTTCTCCGTTATGGCTCCGGGTTAGTGTCAAGAGATCGGTCCCGGTCCGGCACGTGTGCATGGTAATAGTGGGGACAGCTGCAGTCCAAAACTGTGTAACTATAATATCCATCTCTGGGATCGTGACCGGCCTCTTCAAAATAGATTCTGCGGCGCGTTATATGCAGGGGAAACGCCAGGTTCTACTAGCTTATTTTGGTCGAGTACGAAAGTCCGAAGTGCTAAATTCGGAACG",
  "ACGGTATTACATAGCAAAACCGCGTCTCGGTCCTTGACGCAGGTGAGATGTAATAGCGACCCGGCTTGGGTTGCGGTTTACTGGTACATGACTTATATGCCGCACGACGTACTTATAACGTTTGTTTCAGCCCTTACTCCCACCTACCGTGGTAGTGTGTTTGAGTACGCGTGCTTAGGCACCAGACTAGGCAGACGGCAATCTTTCGATCTTTCTCAACGTATGGGATCGAGTTCGGACTTCAAGTGGGTCTTTAGGGTCCGAAAACTAAGGCCTTTTGCAGATTGACAAGCAGAGATAATTCCCGTTTGTCGTGG",
  "ATGTCGGATCCGGACGGGTGGCCGTTAGATCGCCCAGGAGTTTTTTAAAAAACAGACATGAGATATTAATGGAGTTTTCCGCACACGACATGGCCCTCAGTCGGCCAACCAGTTCCAAATAAGACTGGATCCTCGGTCACAAACTAAGATGATGAGATATAATGGGACCCTGCTTTTACCCCTCATGTCCCGCAATGGAGTGGTGGGCTCGTAGTCACGATTACGAGCTAATTCAAATAAATTCGTCGCATGATTCGGCAAAGACGTGATCGGCACTTACGTCAAAGTATAATTCCCAGAGCGACATTCCATGTCTC",
  "ACTGTATGAGCGACCTTAGCTTGTATACATCTGAAACGAGCCAACATCCCGACTAACCACCCTAATTCGTACATCAGGTGGGATCACGCTGGTCCGGCGTCTCTTACACTCCTTTCGATAACCCAGCATTAAATTCCCAGCGGAAGCGCAAGCTTGTCTTGGGCTTGGAGACTTTTACCGCGTATCGATCAGTAGCACAGTCGGATCGAACGGGAGCCAGAATCAAGAGACTTTTCCAGGGCGCAGCGACTGACTTTCGGCGTTCCATTTTCAAACACTTGTACCCAACGAATGCCACATCAATACACAGTTAATTC",
  "CCAGGTTGAGGAGGTGCCCAGGTCATCCGATTTGAAAACTCCATGATGTTAAGGAACGACGAGCACACGACTTACCGGTGCAGAATGTGTGTCAACAAGACAACAGTACCGTCGTTACTTGGCCGCCTTTAGACGGGTGATGGCAAGCCGCAGACGATAGGGAATTACAACACATTCTCACACTACGAGAAGGCCTCACGCCCGTTTTTTGACCTTATCGTTGCGGTCAAGAGATACGACCATCTACGGTAGCTGGTTGAAACCGGCGTTCACATGATTCAAAGGGTGGCAGATATATCTAAGCCCCTTACGGCGTA",
  "GTCGGTGTTTCAGATAGATCACCTCCCCATCATGTTGATGCACCTGGCGGTCGTTACACCTTAGGTGGAACAAGACATAAAAAGTTGCGATATATATGAGCACGGCATGCGGCGGTAGATCGAAGAGATAATTCTCCCTAAGGACCCTGACAATTTTGTAAATCTCTTCATAATCGCAATTGTGACGGACCTCTCACCCGGGGGATTCTCACACATCTGGGTTTATGGCCTCACTCTACGGACGGGGGCCGCTCGTACGTGCGGAACAAAATTGCATATCATAGTTGGTCTTTGGAGTTCCTCGGCGCCGTGGTATT",
  "CACTAATGAGTGTGTATGCGACCGCGCTTACGTATCGCGAGGGTATCGTTGGTGTTAGAACCTGCCTGGTTGTGCTTAGCAGAACCCCTACCTATGGATTCATCTGCCGGTGAGGCAGCAGACCCGCTACAGATACATGAATAGACCTGCGGGGAGGTCATCATAGGATAATTCCAACGCGCCTCCCTGGTGGTTCTTTCAAACTAGGGATTCGCCAACACTTCGGCAAAACCAGTTAGACCCGGTGCGTCAAGTATACGGTCTATCAACAACCCAGCATGTGCTGTCTGCAGGACGGGTTCACGCCGTCCGAGTGC",
  "ATTAAATCGCTCCAGGTGATGAGCGACCGGTGTGACTTCCGAGCTGATAGAGACAAAGCTCCAAGAGATAATTTGGGCATTAAACGCCCCACATGGTTGGAGTAAATTTCAGCGTCTGCGGAATACTTCGGGACCTACTTAATCGGTACCGACTCACAGGCCCTTACCACTAGGAGGGTAACTGTGGTGCGCGCGCCCAGCGAGGCCTCCGGTTGGAGGTACTCTGGGGTCATCGGACGAAAGAGACCTTGATCAAAACTGCCGCCAGCCTCGCAGTACTGAGACGCTAAGCCATAGGATGCAGAGGGTGCGCAACA",
  "CGAGGACATTTACGTGAATAAAATGTCGTCCCAATGGTATGAACAACATGATTGGCCTTCGGTCAGACGTGTTAGGTCCGAGTAAAATGTGGACATCCGGATGTGGTGCTGTAGCCCGCTTCTCTGAACCGTCGAAGGCTTAGCCTCGAGCACGTTTATATAATCAAAGCATAATTCCGCGGACAACCGATGATTGATCAGCTCCTAGTCGGATCAGGATTCCTCCTTGAACTCAGTTAGAGTTGATGCTCTTGTTCCTACAGGCGGCTGGGTGGCGAAACGGGTAACACTATAAGATTCTCCCGACTGCAGTCACG",
  "GTCAAATCCCCCGCGTCCTGAGGAGTGTACGGGGTGCACTGCCGGCTACCTAGGTGTACCGGCCGAGTGACGTAGGTTCGGTTTTGCGGTGACGCGACCTGCAGGGAGAGGCAAAGTGCGACCAATCCAACGTTAACTTCAAGAGATAACCTCTGCTTCCCTATCCAACGGCCGACGCTCATAGCGCAGTCGGACGTGGACTTCTCCGATTGGTCACCACTTTTATGGCATACAACATCTGGCATCCCTCTCCCAACCCATGGCCCGAACGCTTTCAGTGGACTCTAACCTATAATCCGATCGGTACTGAGGTAACA",
  "AAGTCCATCAACCGGGATCGTACAGCCACAGGCTGGTCCCACATCACTTTGGCCTAGGAACTGCGAACCCGGAATTTTCTAAAGGCGTACGTACCGTTGGAATTCCTCGAGTTTGTTACAGCGTTATTACCAGGATACATTAATACCCCTCTCAAGAGATAATCTTACCCGGCGTGCATGGAGAGACTTACGGTCCTTCGGGCGTCCCGTTTTCCGCTGCAATCCCATCGCGTACAATTACTCTTAGCAGAAATTGCAAACGTTCGCTCTTACCGCTATCTCTTAACCCGTGGTAAAAACTAAATGGCACATACGAC",
  "GCGCACAAGCCCCTGCCGCCTTGAGAACCGGCATCAGTGTACATACCACCTTCGGGGAATAGTTAACTCGATGTGCGATTCGCTCGCGGTGTTGTGTTACTCCGATCGCTGCACTACTATTGAGTTCGGAGGACTTTCTTAGTTTGCGCATGGCGGCTTCAAGTTTTAATTCCCTACTAACCCTCCATTTATAAAAATGTGATAATAGGTGACGCTTGCGACTTCCGCGAGGACAAGTAGAAGGTTTTCTGATGAAAAAAAATATGCCACACATGAAATATCCAGACTACCGAACCAATCTGTGCACTGCCAGTTTA",
  "CAGTGAGAACACACATATGTATGATGAGAGAAGTGTATATCGGATAGCCATATCGAATGGGATCTAGGCGTTACAAATCTCCTCCCTGGCAACAAGGACTCAAGAGCATATTCCGTATTTTCTACACGACTAGTGATAATCTGTTGGGGGTGTCTCGTATGGGAACGCTCCACTTGGTGAATGAGCTATTAGACACACGTATGAGATCTCCTTGACCATCGCTAAGGATATACCAAACGTATGACTTGAGGAAAGAGTAAGGACGAGAAATTTTGTTGTCGAGATTTCGGGTTACTGTATTCCCCTAGTCCACACGC",
  "TGACCTCTACTATGTGCGGTACTGTTGACACTCTTTATCAATCGAGCGTGAAGGCGCCGGCAGCTCGTCTTCGCAGGCACTCTTCCTTGATCGGAAGATAATTCCTCACCCCGCAACTGAGACTATCAATGTGCCGTTGCTCGCTGTAGAAGGACGAAACAGCTACAACTTTGATAGGCTTCCGTACGGAACGATAACTAAAGTTCGCAGCCGTAGGACGACGGTACCAGAATAAGCGCCGGCCCGATCCGATTGTCCCGTGAGTTCCGCTAGAGGACCGTAGCGCCTGCGGGAATCTGTTGTGTCCACAATGTATA"]
 k = 15
 t = 20
 n = 10
 print(gibbs_sampler(dna, k, t, n))
 # pattern = 'AGCACC'
 # dna = ["AGCGAGGTTTTGGACTACCAGCTTTTAGTCGAGGCTAGGTTTCTCATCACTTTGTCGTACAGGATGTTGGTGTTTGACCGCCGCAGTGCCAGGCTTGTATTG", "GACCTTGGTTTAGTCGGGAAGGGGGTAGTGTATCGACATGCGAGCTGTTGTTACGGAGTTTGGGTAATAATAATTACGGTAGCACCGGGGCCTGTCCGTTGA", "GGCTGGGTCGCTCACTTTAACAGCCAAATAAATGGTTATTTCAATGGTCGCTGGATCGTAATCACACGAAGATGTGATAGGGGGCCTCTGTTTTTTACTAGT", "CTTGGCACCTATGTAAACCTCATTGAAGAAACAATGGCACTACTTCGGAAACGGTAGTTCTGCAAGAGCGCATTAGGAAGGGGAACATTAATGGCAGACTTC", "TCCAGGACCAGGGAGCCAAGGATCCCAGTCTATCATCAACGATCTACTATACTTCCGATTTTGCACTTTCCGTGGGAATCTAGTGCGATGGGAGACCTGAAG", "GCGGAGGTTTGAAGTAGAGCATGTCAAAGCGGTTTGGAGATCGCACCGCGAGGTAAGAGTCTACGAGATGAGATCTCTCTATCTTTTTATTCGCTTCACTCT", "ACACATAGGGCGGCGCCTCTCCGATAAGCCAGCCGTTTTATTTATTATACGTCCCTGTTAACTACCTGCAAGCCCTCAGGGTCGCCCCTTCGGTCGTTACGG", "GTCACGTCTACCAGTCAGGACATTTTCTGGTCCATACCGAACAATCCGTCATGTTATAGCCGTCTCACGGGGGGTCCGAGCCGTTAGCGGATAAAGGAGGTG", "CGCTGCTTCGGCAAGGCGTGTAGGAAACACTCGGTAGCTCCCGGGTTAACGATCAACTCTTACCTCATCATCTCAAGTGGTTGACAGGTTGTCTTATCATAG", "GCGTAGCTAGGCGCCGTAACTGACTGACTCTTCACAAAAGGTCTCAGGAAATGTTCTAGGCCAAATGACTACGATCGCGGAGAGTTCGTGCTTGTCCGACCC", "GAGCATCACAACCAGTTATGTATTGGAGGCACGGCTAGGAGCACACGCTACGCTGTGTAGCATCTCGGGTTGCAGCTAACAGCTCAAAGGTTTGCCCGTTCC", "ACGATATGGGTGAGAAGTGCAGCGAAAGACAAATTGTCTTGCCGCGATTAAACCTCCTGGCGTAGTTCACTCGGCTTTCCAGAGATCATGGACTACAGTGCG", "GCCTAGGAGAACTGCCGGCTCCGCATTCGCGCCTCGGAGTAAACCATTTCCCCATCGGTTGTGCGTGCTAACTGCGGCAAGTACACAAGATGGTCAGTTCAG", "GTACACTACGTGTGAAATCAACCAAAACTCGATGGTACAAAGCTTTATGAGCACTCCAAGCAGCTTTTAAGCAATCTACCACAGATTAGAGGTCCGGCAGGT", "GGAAGATATATCTTTCGGAACCTCTTACAATAATATAGGGCGTTGTCTTTCCACCGGACACGCCTCGAAGATACCTGATAAAGTGAATACCCCCTTCTTAGC", "TTGGTCCTTAAAAATGGACGGGGTGAGCTAGGGGTATCACGGACGTCTAAGGACCGCTTCCCCGACATGTTCGGCAGAGTGGAAATTCGCTGGCATCGTGCA", "GGATCCAGGTGACTTTAGAGACCGTCCACCGGTACGTGGCGCTTAGAGTCAGACTGTTCGTGCCCCTTATTGGAATAAGTTAAATGTACGTGTGCGTGTGCG", "TGCGCAGGCAGTTTCTACTGTCCACTATGGGCCTCCCTCATTACAGAGGGATTAGAGCTGTAGCGCGACTACTATGTTCGATCGATTCCAGTCTTATCGCTA", "GGGGGCTTCGAACCACTTTCATTAAGGGTGACACTGGTTAATCCACATCATGTGCCCTGAGCCCACCTAACTACGCTTCCCCTAGGCCCTTGCGGCCGTGAT", "CTGGCCGAGGTACTAGCCGCTCGCTGCGGTCTTCTGACCCTTCGGGGTCAAATTGAATCCTAGGTAGGCTATGCAACGGGACTCGTGACACAATAGTATATT", "GCGCCGACCCCACAACGTAGTCGTGTTCGACGAACATGACGAAACTGAATAGTGAAGGGCGATGGAAGATCAAGTTCTACCCGTTCTCAGTAGTGTAGAGCA", "TAGGTATCTACGTAGGGGCGGGCCAGCTGCTATATGTTGTTGCTGCGTGGAAAAGCCATGTCTTCCCGGAAATGTAATCGCAGGTACTTTACGTACCCTCAG", "GCCTTCGATGCGTGGTATCGACCGAGAGGACCGCAGAGTGCTATACACATCCTGTCTAATATTAATTACAGTGTGGCTATCGGCACGGCACTTTAATAAAGG", "TAAACAGCAGTTAGTAGGCTAGGGCTCCCGAGTGAGGACGCGAGCGGATGGAGAACCGGCAACGAACAGAACAATAATCCACTTACCGATCAGGTTTCGGTG", "GCAATAGTGTGGTATTAGCACCTAGTGACGCGGCGGTATAAAAGAAATACTACGCTCTTTTATTGTCTGTCCACAGGGCTACTATGACCCATCTAACTAGCA", "AGGACGTCTAAAGAGCACGTTGGCTGTCAACGTGGCAAAAACGAGACGGGTATTATAGAAATCTCTAGACAGCCTTCGCTTCGACGTGAACAGGTCTACATT", "CGGGGAAGTAAAGGTCAGTCGGCTAAAGGCCCCAGAATAAATCCTTGCTGACATAGTTCACTTTGGTAATAGTTCAGGGTATTTATTATGATGTGCGGTCAT", "TTGTCCACTCGCCGTGATAGCCCTAACTGGGGGGAGGACTGTTGGGCTGAGCCCTAGCCGAAGTGCTGTTACGGGGTAAGGTAGGTACATGTGGCATGCCCT", "TGTCGGTCCGCTCTATCGCTTGTCTGGCAGCTCGCAATGCGACGTCTTGTTCGGCACAGCCGTCACTACGGAAGCACCCAGATTGATGTGGTACCGACATAA", "CTTGCTGGATTGCTTGCCGACAATTTTTTCGCAGAATTTAATAGTGATTGCAATTTCGAAAGAGCCAGAAAAGCTGGTAAGATGTTCAGTACTAAGCTTAGG", "ACAGATCTGATGAGGGTCCACCGCACGTTCCGACGCTACTCGTTTTTACGCTGTCCCCCCACAACCCGCCCGACGCCGTGTCCGGGGAGTGGACCACACAAA", "CTTGGCGAGATTCCGTTATACAAGAGCCTTTACGCGAGAGAGGCACTACTACTGACTACCTGGACCCCGAGGGGCTTAGTGGTATAATGCTTACCGCAGCAC", "TGGCCAGATGTGGGTGGGAGGTAAGGACCTGATCCCTAATAGGAAGTCGCCTGATGTTTGGATATGGGTCGATTTGGGTGCCCCCTTTAGTTCCAGGGATAC", "AAAACAGTCAGAATCATGGACCGGAATTATAGAAGTGGCCCGTGTATAGCTACTCCGGTAGTAAGCGCTAAGGGCAGCTAGTCGGCAGATAACATACAGTGA"]
 # print(distance_between_pattern_and_string(pattern, dna))
 # dna = ["TAGTTAAGGAGGATCACTGTCTTGGAGTCCTCCGCCCCCAACCCGTGTTGATTCCTACCCCCGCGCAACACACCTGAAATTTGTCTTTCCCGAATGGCGACTCACTATCAGCGCGGATGAAGCGATTATTCCCTAGTAGATTGTGCCCGGATGTCT", "TCGAACGTTTGGTAGTTGACGTGTAGCTGCTTGGACGCCTTGAATGCCCGAAAGCCTGATTGAATCAAAGGTCTCATCCCCAGTGTTAAGAACAGTCCTTTCTTCGAGGCGCTACAATTTGCATAGGCTAGGTTGCTGCTACGCGAGAGTAGAACA", "CGGAATGTGTATCACAACCCAGGTAAAACCTTTTTAAGAAACGCAATGAGTACATTTCGGGAAATGCTTGAATGCGACTCGATTAGTTATCGCGCCCCCTATAATCGGAGAATCTCAGGCGATACTACTAATTTGCGAGGGGTTGGTCGACGAAAA", "GAGGGAGCGTGCCCCATCCCGTGTCCTTTATGGCAGGATGCCTAATGAGAAGCCCTATCCCTTTATTCTCTATTCACATGCGTCTAACGGCAGTGTAAACCAGTCGGCCATTAGCTGCATCACATCCGAAGCGAATTCGTTTTCACTACACCCCTT", "ATAAGACAAAAATGGAGCGATCATGTACTCTCGGATCATCTGTCAGTACGGCGTACCGGGCGATTAAAGATTGAAAATGATATGTCGTGGATCTCTCACTACTGATACCGCGGGATGTACACCCAGTCTAACAAGGGCGACTCTCACATCCCCGGT", "CCGTCACTAGTTTGGCGGACTACCCCATATAAGGTCGCTTTCGTGTAGCTCACAGGTGGCTTGGGATTCCAGGGTAGCTGAATACCCAGCCCGTGTGGCTGATGAGGTTCGCAAAGTTATGGAACTTCTAGCTGGGGCGCTCTGATACAGAATGCC", "GCTCAGACTCAAGGCCAAGGACTCTACATCTACGCTTCAATCCTCCGCCGAGTTAATTTCACTGCTTGGCTTCTCATCCCCCGTCAGGCACATATTGGCTAATAGCACAACGCAATGTGCTATCTCCTCGAAACGCCGGACACTTCTGACCGGCCA", "GAATCGGTGAGGATTTGTAGGGCGAATAACTAATGGTGAGGCGGGGTTTAATATTGTATTATTTCTGAGCACGATCTAAGGTGCGGTAGTGGGCCTAGAGCGGTACGGTAGTAAGTGGCTGTTGGACCAAGTCGCTGTGACTGGCACAGCCCAAGT", "ACAACTACCTAACACGGTACCTTGCGGCATGCGGACTTTAACCTTGGCGGTGGTATTATTTCCCTCCTTCCCTAAAGAGCAAGGAAGCGGGTAATTGGTAGACGCACGTCAACGCCGCACGTTTGCTCATACTGTCTATAATAACACACCCCGTGT", "AAAGCACATAAGCTGTGCAGACGTACATGGATACTATGCCATAATGTCTCCTAGATGCGTGTTATCTCCGGACACACCCCCGGTATCTACACTGTTTAGAGCGCAGCACGGACTCACCGAATGACGCATAAGAAACGGAAAGGATTTTGGTATACA", "GCACTACATCGCAGGTTGCAAGTTACTGCAGGTCCAGCCTCACTGGGTATTCAGAACATTTCCATTGCGAGGACATGGAGCAAACCCTCATAGTGTCCGCGTAGCAACCGAGATGCTCTTTAAAAGACAGCCCGCAACCCTAGTCGTGACCCGCGG", "CTCAGCCCTAGTAGTCCCCCTCCTATTGTATACTTTAAATCTTTCGGCGCAGAGCCACCGTTGACATGGTAACAACGGCATTCGATCCTTACGATCCCGGTCGGCAATTCCAAAGAGACTCGGTAGGCGGCCTAGGCTCTTTCGGAGTCTCTTGCA", "CTCAGCCCTAGTCGGAATCGCAAGACGATAAGCAGTTGTGGACGACTATGGATTGACCAAGCACAGCAAACAACGTAGCTAGAACCTTTTGCCAGGGTCCAGGAGTACGCGCTATCTCCTTGTTAGCCCACAATCAGCAACAGGACCCCTCGAGCA", "CTCTCGCATTCGGTCCGAATTGTCCTCTTCCCGGTGAGGCTCTACAAGAATGTTCAATGAGTTTTGTAAACACATCCTCACCATAAAGGTCCGGTTTCGCGGATTTACCCCATCCCAAGTAGTTTGGATAATTGTCGCCCCGATATCCGTCCATCG", "GTTCTAGTTCGATCTATGGAGTGCTCACAGCTCGTCCTGTTGTAAGGCACTACAGATGTAATTCGATGAACGCTCAACCCCGGTATAAACGACTTTCCACACCTACAAGTATTTTTCGGACCTCCTGCAGGAAGCTTATACTCAGCCGCTACAAAT", "GGTTATTCGGTAAGCCCCCGCCGTATGTGAGGGCGGTCAAAAGTGCAACGGCCGTACCGGCCGTGTGAACAACCCACCCCTGGTACAGGCAGCAGAAAGGTTTCGCCGATTGTAAAGTTCCGAGTCTTTGGATTTAGCCAGCGAGAGCTCGAGATT", "AAGAATTCAACAGAATAGTGTACCAAGAGGACCACGCACAACCCAGGTAAAATTCAGCAAGACACCGAGCGAAGAACTCGACCATGGAAAGTCGCTACTGGTAGGCTTGACCTTCCAGATCTATAATTCCTAGACCCGGGAATGTCACACCCTTGT", "CCCTTGACCGTAATTCTGCCCGGGGACCTCTACGCAAAGAATCAGTTACTCATCCCTAGTGGAAGCCCGTAGTGTTTACGAACGTGAAAATATTAGTTAATGCAGCGACACATTCCCCAGGACGATGCGCGATGCATAAGCTCCCGGGGAGTAGCC", "TACCGGCATAAACACATATTAGCTACAATGCATAATTCTTCTGGACGCACGTTCCTTAGAGACTAAGCTCCCCCTATGAATACACAAGAGGAATCCCGCACCCCGCGTGCCTCACTCGTGTGTAGCAAATCCTCAGCGCCTGCTAGTTCTTCTAGC", "CGCAACCCGTGTAAAAATCCATTTTATCTCCATGTATATAGTAAACCGGGAAGGAGTCGGCTGCAGTGCCGGTACTGGGAGTCCCAAGGTCAGAGTGAGGTCGGACGGGCTACTCCCCCGTTCCGGTTTACTCCGGATTGGCCGAAGATTAAAGGT", "AGAGCTATATGAACCCGTATACAATATAAGAGTATTCTTCCGACGGCTCGATACTTCAAGCCCATCCCACGTATTCCCTACAGGCCACGCTGGTAACTAGTTTACAAATCTCCAAATCGCACGATACCGGTCATGTGGCCTGGCTAGGCAAGCGCG", "CTTAATAGTAACCGCAGCCCCGGTGCTGCAATATACCCAATCCAGTAACGCATCTCATACACGGGCACGTAATCATGACTTGTAACGACGCGCCAATGACAACTCGTTCTCAAATCCGCACATAGTACGCGATTATCGCCGAATTGTCCTGATATT", "TGCCCGTATCTCAATTCAGAGCCGCAGGTTAAGCTTCCCACCCCGTGTGGCGCCAAAGCATACCTACCCTGCCGGCCCACCGAGTACTGTTCTCTACCAGGAGAGTGCGCCAATGTGGCGCGCATTCCTAGACGAATAACACTCTCCTGAAATTCT", "GTCGTCTTCTTGAATCGAGGTATGCACAGAAAGATGCGTCCTTACTCATGTAAATCTTAACCTCCAACGGTGTAAGCCCGCTGGCCCATCCCATGTGGCGGTCTAACCCAGAAATGCTTCCAATCCAGGATAGTTCATGTTTTTCTCAACTGCGGG", "GGCCGGTCACGATTTGGTACGATGTTTTTTCGACCGACCTCCACTCTGTCGCAGCTTTTATAGGCTAGACCACGTACGAGGTAACCCAACCCGAGTGCGACCAATTGCTTTCGTGTGGCATGGGACCGGGTAATCCCTAGGAGCTCTCTTCTGTAC"]
 # k = 12
 # t = 25
 # res = greedy_motif_search_with_pseudocounts(dna, k, t)
 # for item in res:
 #  print(item, end=" ")
 # dna = ["TTGAGTAGTATAAATTTCACGACAGACCGACAATCACTCTTA", "TTGATCGGCAGCGTCCTGTTGGTAGACGGATTGAATCCGTTG", "TTGATTTTCGTTACACCAATATCCACCCTGGACTGGAGAGTG", "CAATAATTGATTTCCTACCAATTGCACTATCTGCGGGAGGCT", "GACCCCAAGGTGAATTTTTTTGGCTTGAGTCAAACAGGTTTA", "TCTCTCTATTGGTCCGGTTTATCTATTATCTTGAATGAACAG", "TTGATTAGACTAGGTTGGGAGGAACTAACTTAGTGGATAACT", "CTGCGGTGAGGTAGTTTCTTGAGTCTTCTAACTCTTTGTGGC", "TTGAACGCTTGCGCACATACCAAGTATAACCAAAGCTTGAAT", "GTTATTAGGAGTAGATGGTTGAGTCAATAGTCGTCCGCGGGA"]
 # k = 6
 # print(median_string(dna, k))
 # dna = ["GCACATCATTAAACGATTCGCCGCATTGCCTCGATTAACC", "TCATAACTGACACCTGCTCTGGCACCGCTCATCCAAGGCC", "AAGCGGGTATAGCCAGATAGTGCCAATAATTTCCTTAACC", "AGTCGGTGGTGAAGTGTGGGTTATGGGGAAAGGCAAGGCC", "AACCGGACGGCAACTACGGTTACAACGCAGCAAGTTAACC", "AGGCGTCTGTTGTTGCTAACACCGTTAAGCGACGAAGGCC", "AAGCTTCCAACATCGTCTTGGCATCTCGGTGTGTTTAACC", "AATTGAACATCTTACTCTTTTCGCTTTCAAAAAAAAGGCC"]
 # k = 6
 # motifs = best_score_from_random_motif(dna, k)
 # for item in motifs:
 #  print(item, end=" ")


 # dna = ['TTTCTACATCAGACTCTTGTCGGGTCTTCGGGTTTATAGGCC', 'TGCAGGAATTTACTTATCCATCAGTATGTGTCAGGGAAAGTG', 'TAATGGTGTGCGCACCGAGAGACGCACTCTCATCAGCGACTT', 'CAATGTGATCTTCATTAGCCTCATAAGGAACAAGTGGCACTC', 'CATAAGGTAGGTGACCGGTCGCTTTCTGCTGACAGCCCAATA', 'TGCCACTCGATACATCAGTACCCTCCATCCAGTGGGAGTCGC', 'CATAAGGAGATTTTGGCTTGCAGCGGTCGTTTCGCTCGCCCG', 'TCTACGATCCGGTGAGAGCATGAGTACACATAACCGAGTCTA', 'CCTTCAAAGACTATTCCGCATAAGGTCAGATCTTCCTATGGC', 'TACAGACATAAGGGCAGCTCCTTTAAAAAGCCCTCTCTCACT']
 # k = 6
 # print(median_string(dna, k))
 # dna = ['TGGGCAGTTCCACGCTCCAGAGCTTTGTCGCAAAGTGACCTTTCCTCCAACAGGGTCTAGAGCCCCTCGGGCCCCCGATCTGGGCACGATGATTCCATTTACATCATTCTACGTCGTTTTTTTAGCTGTGGAATAAACTGACGGGAATAATAACTC', 'GCGAAACGCCTCTGCCTGGGTATTCGACTTTTTGATTGCTTACGACAACAAAAGGCCTTTAATATTCAACGAGCCCAATATGCGGGGTTTTTTTCTCACCCTAATTTCTATCGGTTGTCCCCACAAGTGCATCGAGCGGTTTGATTCCAAGCTCCT', 'CGCCCGCATCCTACCCCATGTGAGCTGCGTTCCGCGTATCTGAAAGAGTATTTCCAGGTACAAAGAAACGACACGTGATCTCACATGCCTATCGCTAGTCCCCTACTTCTTCGCTGCCTAACGTTAGATCGAATATATTCCTGAGTCAGCCCAATG', 'GGTTGCCCGGATGCGGCGGAGCGTTTTGGTTGACTTCTCTCCGGAGCACTTTATCTCCAGTCCCGATGTGCGTCGACTTTATAGCTAAGCAGTAGACCTACATCCCGGTCATGATAATACAAACTCAAGGCCGTGGTAAGCTCCTTTGACCGTCTT', 'TTTTGTATATCAGAATTACGGTACATCGGGGACCACATCCCGCCATATAGACAAGCTGCGGAAACCCTGTACGTTCTTTTCATTCAGGGTACCGGGCGGAGATTAAACGATCGCCATAGCTCACTCTAACATGGCGCAGCCCCCGCCCAATATGCG', 'TCCAATTCTAGTTAATTACCTAACTGATTACTTGTTCATACTCCAGAGGTAAATCTCGGCCCAAACCAGTGGGGTTTTTAAGTGACCCTATATGCGTCCGGCTCCGGACCATAACGGGGTGGCTCGTGAATGTAGATGCTGCACGACCATGCGCCG', 'ATGGGCGTCGTGAGTGACTAAGTTTATGATGTCGCAACCCCATGTGCGGCCATGGTTGGAAAGGTCCTAGGTAATGGTATCATGCCCATGTTCAAAGGCCGTTTTTGATCGCGACACGAGAGCTCTGAGCAGGCAGCTCTACATTACTTAGCTCAC', 'GCCCAATATGCGATGCTCCCTCATCCGTGAGAAAAAGATATAGGTGGTATTCTAATATGGGGGTATCTTGCTTTCATGTTGATCCTGTGGTCCATCGGCAGCGAACGGGGTTACATCGGTGAGTATCACTTGTTTCCCGATACCTCTCGGCAAGTA', 'CGTCTCTGATCAAGCGTTTCCTATATAACCCAATACTTTTATGGATTCAATACCCGCAGCCAGCGTTAGGTGTTTTCCTACATGAAGCCAGGTTCTGGACTATAGAAGGACATTACGTGTGCAATCTCACTATCCCCATCTGCGCTATTGCAGAAG', 'GAAGTTGACGGCACAGCGACAACGGAACGTCAGGTATCGAGATCCCATGCTATGCACCTGTGGGACTCGTAGCTTATCGAACGGAAGGTTATTCTAGTACCAGCAAGTAGCGAATTACATAGTGCGGTCAGCTCGGGAACAGTCGCCCAATGTGCG', 'GCCCTATCTGAGCACCTATGATCCGGAACTATAGATAGAATTGTGAGTCAATCTTCTAAGGCGTCTTGTGATGTCTAAAATCTCCAGTGAACTGTACGAAGCACAAACAATAAATGTTTGCGTAAGGGTAGCCACAACTGTCGCGTCACCGCCCAT', 'CAATAGCTTCAAATATTTCCCATAAGGGCGCGACACGGTGTCGCATTATGTTAGCCTGCACGCTCGTAGCATGCCCAATATGCGGGAGCTGAAAAAAAACAATAAGCGTATCTGTAATCGAACCATAATCCGCCTTATATGGAGAGAACCCCACAG', 'GCCCAATATGTGCACCGTTCGCACTCTTGTCATTCATGGCGCCGCCGTGCAAGCACGACCGCCTGGACACAAGTGTGGACCCTTTCCCTCGATCGTTGAGTGTCAAATCTTCAAATCTAAAATCTTTAACAGGCATATGAATACTCGCACATGTAC', 'TGACCCAGGCTCGTACTATTCGCCCGTTGCTAATTGCGTTATCGTGTCCGAGATCTGTAATTGAACAAGCAGGAACCCAAGAACTCCCAATCTGTGATGTGACCCCGTGACACTCCAGACCTACGTCCTTAATCCGACCCCAAGGAATTGGCCTCT', 'CCAGCCCCGGTAGTGCATGGGGGGAGACATGCATCTCTCGCCGTACTAGCCCAATCTGAGGAGGCGTGGCCCAGGCGACATGGATCTTAACAAGCGGATAGTATTGATCAGCTTGACTATGTAGGTTAGCCGCGATTCTTCCCAGGTCGTCATCCG', 'AAGGCACTATCGTGTTTTCGCTACGCCCCGGGCGGGGAACTTGATCATGACATATGCCGATCGTATCTTTTATAGGGCTATGCATCCCAATCTGTGGTAGCGGACCTAGAACCTCCGAAGCTCCCACGGAGTGGAATGCGACGGAGTATTAACTGG', 'CACTGAGCCACTGAGACCGCGGGCACCCTATATGCGACACCATGCGACGCTGCCAAACGTACGGAGTCGCGCACTAAGCTTCTCTCGAGAAGGACGCAATACGTGGCAGGTGCGACCCGCCATTCCCTTGCATCTAACTCGAGATTCTTGGGGGTC', 'GATCGACACTAACCCTTTTCGACGAATGCTCTCGCTTGGATCCTTAGCAGAAAGGCATAATGGTATCCTAAAACCCTATATGGGAACACCGGGTGGGCCGTTAAGACTTCAAACATAAGGGGCTTAAGAGTTTGTGCTTTTAGGCAAGCTCACATT', 'AGGAGAAACCTACGGAAGCGCTCCATACCTTCCCGCTTAAATTCTATGATCTAATATGCAACCCAATATGAGGTCAGACAAAGATTGTTTTAGATCACCTCGTTAACGGGCCCTCATCTACTCGCCTCGCCGAAGATTTCGTACATACCGGCCAGC', 'GATCAGAACATCATGTCCACGGGATCACACTCAAAGTTCACCTTTATCTGGCAGGACGCGAGAGGTCGTGTTGTTCTTCTCGCTGCCAAGTACAAGCAGAACATCCCGCCCCTTACTGGCTCCCCATCTGGGGTGCTTTTTTACAGAGAGGACACT', 'GCCCAATGTGGGTTGCCAGCGTCGGGGGGTCGGGTCTGTGGACCAAAGTCACAGTACTTCGACGTCGGCCTTATACGGTCGATCACGCCGATATAACGAGCTCAATCTAAGCCGAGCTACTTTCGGCTTGTTTGTTGCGCTCTCTAACATGAGCGA', 'CCTCCACACCCATAAGGTATTCGTCTCAATGAACTGGAACGGAAGTATCGCTCTCTCATAAAAATACATGTATCTGGAAAGCTCAGGGCACGGGGCTCCCCATCTGCGTTTTACACGTTGAACGCGACGTCTCTTCAAAATTGTTGTTCGAAGCGG', 'TCGGCGCCATACAGTATGAAAGTTGTTTTTTGAGGGTATCAGATTCGATCGCCGAGGCCTTTAGTAGAAGTACTACGCTTCGCGGGGGCGTTCGCACCCCTATTTGCGAAAGATGAACTGGGAGGTCTCATTCCGGGGCTTCTCAGTTGTATCCGA', 'GCCGCCACGAGTTCTTCCCTGTCTATGATTCACTAGTAGGCAATGCACGCTTGATTGGTCAGACCATGTTAGCCCCAATGTGGGCACGCTCAAACTGATGGTGCCAACCAGGGCTAATGGAGCTTCAGCTTCTATACCTTTCTCGCTGGCGGGCTC', 'TGGATCTTTATGGGGGATAATGATAGAATGGAGACTAACGACCCTACAGCGCGAACTCACGTAGCAGATCGAACGGTGATAGCGACTACGTTTTTTCATCGGATGAAGCATGTTTTACACAAAAGACCGAAGGGGGAAGGCTTAGCCCGATCTGCG']
 # t = 25
 # k = 12
 # res = greedy_motif_search(dna, k, t)
 # for item in res:
 #  print(item, end=" ")

 # text = 'abcdefghi'
 # k = 3
 # matrix_profile = 'abcd'
 # print(profile_most_probable_k_mer(text, k, matrix_profile))


 # dna = ['AAATTGACGCAT', 'GACGACCACGTT', 'CGTCAGCGCCTG', 'GCTGAGCACCGG', 'AGTTCGGGACAG']
 # k = 3
 # print(median_string(dna, k))

 # dna = ['TTACCTTAAC', 'GATATCTGTC', 'ACGGCGTTCG', 'CCCTAAAGAG', 'CGTCAGAGGT']
 # pattern = 'AAA'
 # print(distance_between_pattern_and_string(pattern, dna))


    # input = ["TCATATTTTT",
    #  "CCCTATCCAC",
    #  "GGGGGGGGGG",
    #  "GGGGGGGGGG",
    #  "GTGGGGGGGG",
    #  "GGGGGGGGGT",
    #  "GAAAAAAAAA",
    #  "TCTCCCTTAT",
    #  "TTTTTTTTCA",
    #  "TTTTTTCCTA",
    #  "TATTCCACAC",
    #  "TCCTCCTTCC"]
    # print(entropy_matrix(input))
    # Dna = ["CTCGAACGTGTACTTCCTTCTCCCC", "CCCCCAATCTATTTCGGCCCCGGGC", "CGTCATCGCCCAACTCCTCCCGATT", "ATAGCTGACTGTTTGACCTGGCTCC", "CGCCAACACCGCCTAGCTAAGTGTG", "ACTGTATATCGGCAACACCCACCCC"]
    # Dna = ['AAAAA', 'AAAAA', 'AAAAA']
    # Dna = ['ACGT', 'ACGT', 'ACGT']
    # Dna =  ["TCTGAGCTTGCGTTATTTTTAGACC" ,"GTTTGACGGGAACCCGACGCCTATA" ,"TTTTAGATTTCCTCAGTCCACTATA" ,"CTTACAATTTCGTTATTTATCTAAT" ,"CAGTAGGAATAGCCACTTTGTTGTA" ,"AAATCCATTAAGGAAAGACGACCGT"]
    # k = 5
    # d = 2
    # res = list(motif_enumeration1(Dna, k, d))
    # for item in res:
    #     print(item, end=" ")


    # genome = open('Salmonella.txt').read().replace('\n', '')

    # # print(minimum_skew_value(genome))
    # Text = genome[3764856: 3764856 + 500]
    # print(Text)
    # k = 9
    # d = 1
    # print(frequent_words_with_mismatches_and_rc(Text, k, d))


# pattern = 'GCGCCGTAC'
# d = 3
# result = neighbors(pattern, d)
# for item in result:
#     print(item, end=" ")


    # print(d1_neighbours("ATC"))
    # print(neighbors("ACG", 1))
    # with open('approx_pattern_count_data.txt') as f:
    #      genome = f.readline()
    # pattern = 'TCGGA'
    # mismatch_count = 3
    # print(get_approximate_pattern_count(genome, pattern, mismatch_count))
    # pattern = 'ACGAGCATA'
    # mismatch_count = 4
    # res = get_approximate_pattern_match(genome, pattern, mismatch_count)
    # for item in res:
    #     print(item, end=" ")

    # with open('hamming_mismatch_genome1_data.txt') as f:
    #     genome1 = f.readline()
    # with open('hamming_mismatch_genome2_data.txt') as f:
    #     genome2 = f.readline()
    # print(get_hamming_mismatch(genome1, genome2))
    # with open('data.txt') as f:
    #     genome = f.readline()
    # print(minimum_skew_value(genome))hamming_mismatch_genome1_data
    # print(get_skew_diag_data(genome))
   # print(get_hamming_mismatch('GGGCCGTTGGT', 'GGACCGTTGAC'))

   # print(get_hamming_mismatch('abscabaxab', 'ab'))
   # print(get_pattern_match('abscabaxab', 'ab'))
   #print(get_approximate_pattern_count('TTTAGAGCCTTCAGAGG', 'GAGG', 2))
 import random



